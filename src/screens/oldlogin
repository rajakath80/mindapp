import React, { useContext, useState } from 'react';
import {
  View,
  Text,
  TextInput,
  TouchableOpacity,
  ScrollView,
  ActivityIndicator,
} from 'react-native';

import auth, { FirebaseAuthTypes } from '@react-native-firebase/auth';

import { GoogleSignin, GoogleSigninButton } from '@react-native-google-signin/google-signin';

const {login, googleLogin, fbLogin} = useContext(AuthContext);

const LoginScreen = (): JSX.Element => {

  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [password2, setPassword2] = useState('');

  const [isRegister, setIsRegister] = useState(false);
  const [isLoggedIn, setIsLoggedIn] = useState(false);

  const [loading, setLoading] = useState(false);
  const [errorMessage, setErrorMessage] = useState('');

  const [user, setUser] = useState<FirebaseAuthTypes.User | null>(null);

  GoogleSignin.configure({webClientId: '74214128356-d1a6rj1kifl6d0pu8dudo6rkm2p2cl0c.apps.googleusercontent.com'});

  const handleLogin = async () => {
    console.log('log in ...', email, password);
    setLoading(true);
    setErrorMessage('');

    try {
      await auth().signInWithEmailAndPassword(email, password)
      .then(userCredential => {
        const user = userCredential.user;
        if(user) {
          setIsLoggedIn(true);
        }
      })
    } catch (error) {
      console.log('can not login: ', error);
      setErrorMessage('Cannot login, please check your credentials, reason: ' + error);
    }
    setLoading(false);
  }

  const handleRegister = async () => {
    setLoading(true);
    setErrorMessage('');

    console.log('registering ...', email, password, password2);

    if(email && password && password2) {
      if(password == password2) {
        if(password.length >= 6) {
          console.log('starting registration herre !!');
          
          await auth().sendSignInLinkToEmail(email, {url: 'https://main.d227vxv8v0qy8t.amplifyapp.com/verifyemail', handleCodeInApp: true})
          .then(() => {
            // The link was successfully sent. Inform the user.
            // Save the email locally so you don't need to ask the user for it again
            // if they open the link on the same device.
            //TODO: SAVE EMAIL IN LOCAL STORAGE

            console.log('email sent');
            

          })
          .catch((error) => {
            var errorCode = error.code;
            var errorMessage = error.message;
            // ...
            console.log('error sending signin link email', error);

          });
          
          /*await auth().createUserWithEmailAndPassword(email, password)
          .then(() => {
            console.log('Email sent successfully');
            setIsRegister(false);
          }).catch(error => {
            console.log('Error during email verification', error);
            setErrorMessage('Cannot register, reason: ' + error);
          })
          .then(() => {
            firestore().collection('users')
            .doc(auth().currentUser?.uid)
            .set({uid: auth().currentUser?.uid, email})
          })
          .catch(error => {
            console.log('Error adding to FB DB:', error.message);
            setErrorMessage('Cannot register, reason 2: ' + error);
          })
          */
        } else {
          console.log('Passwords must be atleast 6 characters');
          setErrorMessage('Password length must be atleast 6 characters');
        }
      } else {
        console.log('Passwords do not match');
        setErrorMessage('Passwords do not match');
      }
    } else {
      console.log('Email or password not entered');
      setErrorMessage('Email or password not entered');
    }
    setLoading(false);
  }

  const forgotPassword = () => {
    setErrorMessage('');
    setLoading(true);

    if(email) {
      auth().sendPasswordResetEmail(email)
      .then(() => {
        console.log('Password reset email sent');
      })
      .catch((error) => {
        console.log('Error sending password reset email');
        setErrorMessage('Error sending password reset email' + error);

      })
    } else {
      console.log('Enter your email to reset the password');
      setErrorMessage('Enter your email to reset the password');
    }
    setLoading(false);

  }

  const signUpGoogle = async () => {
    setErrorMessage('');
    setLoading(true);

    console.log('Google sign in or sign up', GoogleSignin);

    // Check if your device supports Google Play
    await GoogleSignin.hasPlayServices({ showPlayServicesUpdateDialog: true });

    console.log('after play services check');

    // Get the users ID token
    const { idToken } = await GoogleSignin.signIn();

    console.log('after google sign in call');

    // Create a Google credential with the token
    const googleCredential = auth.GoogleAuthProvider.credential(idToken);

    console.log('after google credential call');

    // Sign-in the user with the credential
    auth().signInWithCredential(googleCredential);

    console.log('after FB signinwithcredentials call');
    
    setLoading(false);

  }

  return (
    <View className='flex-1 py-20'>

        {isLoggedIn && user ? (
          <>
            <Text> {user.email} </Text>

            <TouchableOpacity onPress={() => 
              {auth().signOut().then(() => {
                setIsLoggedIn(false);
                setPassword('');
                setPassword2('');
              })}
            }>
              <Text>Logout</Text>
            </TouchableOpacity>
          </>
        ) : (

      <ScrollView className='p-8'>
        <Text className='text-2xl font-bold mb-6 text-black'>{isRegister ? 'Register': 'Login'}</Text>

        <View>
          
          <View>
            <TextInput
              autoCapitalize='none'
              autoCorrect={false}
              className='w-full bg-white border border-slate-200 rounded-md h-12 px-4 mb-4 text-base'
              placeholder="Email"
              maxLength={100}
              keyboardType="email-address"
              value={email}
              onChangeText={val => setEmail(val)}
            />
          </View>

          <View>
            <TextInput
              autoCapitalize='none'
              className='w-full bg-white border border-slate-200 rounded-md h-12 px-4 mb-4 text-base'
              placeholder="Password"
              maxLength={100}
              value={password}
              onChangeText={val => setPassword(val)}
              secureTextEntry
            />
          </View>

          {isRegister && (
            <View>
              <TextInput
                autoCapitalize='none'
                className='w-full bg-white border border-slate-200 rounded-md h-12 px-4 mb-4 text-base'
                placeholder="Re-enter your password"
                maxLength={100}
                value={password2}
                onChangeText={val => setPassword2(val)}
                secureTextEntry
              />
          </View>
       
          )}

        </View>
      
      <View style={{height: 20}} />

      <View>

        <TouchableOpacity onPress={() => isRegister ? handleRegister() : handleLogin()}  className='h-12 bg-orange-500 rounded-md flex flex-row justify-center items-center px-6'>
          <Text className='font-bold text-base'>{isRegister ? 'Register' : 'Login'}</Text>
        </TouchableOpacity>

        <ActivityIndicator animating={loading} size="large" color="orange" />
        {(errorMessage && errorMessage == '' ) ? '' :
          <Text className='text-red-500 py-1'>{errorMessage}</Text>
        }

        <TouchableOpacity onPress={() => setIsRegister(!isRegister)}>
          <Text className='text-blue-500 font-bold py-6'>{isRegister ? 'Already an user? Login instead' : 'New user? Register instead'}</Text>
        </TouchableOpacity>

        {isRegister ? <></> :
          <TouchableOpacity onPress={() => forgotPassword()}>
            <Text className='text-blue-400 font-bold'>Forgot password?</Text>
          </TouchableOpacity>
        }

        {isRegister ? <></> :
          <GoogleSigninButton onPress={() => signUpGoogle()}>
          </GoogleSigninButton>
        }
      </View>

      </ScrollView>
      )} 
    </View>
  );
};

export default LoginScreen;